## Problem 1 : Rank Scores (https://leetcode.com/problems/rank-scores/ )
SELECT score, DENSE_RANK() OVER(ORDER BY score DESC) AS 'rank' FROM scores;


## Problem 2 : Exchange Seats (https://leetcode.com/problems/exchange-seats/ )
SELECT s1.id, COALESCE(s2.student, s1.student) AS student FROM Seat s1 LEFT JOIN Seat s2 on (s1.id+1)^1-1 = s2.id ORDER BY s1.id;


##Problem 3 : Tree Node (https://leetcode.com/problems/tree-node/ )
SELECT id, (
    CASE
        WHEN p_id IS null THEN 'Root'
        WHEN id IN (SELECT p_id FROM TREE WHERE p_id IS NOT null) THEN 'Inner'
        ELSE 'Leaf'
    END
) AS type FROM Tree;


## Problem 4 : Deparment Top 3 Salaries (https://leetcode.com/problems/department-top-three-salaries/ )
SELECT d.name AS Department, e.name AS Employee, e.salary AS Salary FROM Employee e JOIN Department d ON e.departmentId = d.id WHERE 3 > (
  SELECT COUNT(DISTINCT e1.salary) FROM Employee e1 WHERE e1.salary > e.salary AND e.departmentId = e1.departmentId);
